{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryNameRoot": {
            "defaultValue": "'MyDataFactory",
            "type": "string"
        },
        "databricksNameRoot": {
            "defaultValue": "'MyDatabricks",
            "type": "string"
        },
        "databricksManagedRoot": {
            "defaultValue": "MyDatabricks",
            "type": "string"
        },
        "keyVaultNameRoot": {
            "type": "string",
            "defaultValue": "MyKeyVault",
            "metadata": {
                "description": "Specifies the name of the key vault."
            }
        },
        "dataStorageNameRoot": {
            "defaultValue": "MyDataStorage",
            "type": "string"
        },
        "serverNameRoot": {
            "type": "string",
            "metadata": {
                "defaultValue": "[uniqueString('sql', resourceGroup().id)]",
                "description": "The name of the SQL logical server."
            }
        },
        "storageNameRoot": {
            "type": "string",
            "metadata": {
                "defaultValue": "[uniqueString('sqlva', resourceGroup().id)]",
                "description": "The name of the Storage Account tied to the Logical SQL Server."
            }
        },
        "objectId": {
            "type": "string",
            "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
            }
        },
        "administratorLogin": {
            "type": "string",
            "metadata": {
                "description": "The administrator username of the SQL logical server."
            }
        },
        "administratorLoginPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The administrator password of the SQL logical server."
            }
        },
        "enableADS": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Enable Advanced Data Security, the user deploying the template must have an administrator or owner permissions."
            }
        },
        "allowAzureIPs": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Allow Azure services to access server."
            }
        },
        "connectionType": {
            "defaultValue": "Default",
            "allowedValues": [
                "Default",
                "Redirect",
                "Proxy"
            ],
            "type": "string",
            "metadata": {
                "description": "SQL logical server connection type."
            }
        },
        "keysPermissions": {
            "type": "array",
            "defaultValue": [
                "list"
            ],
            "metadata": {
                "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
            }
        },
        "secretsPermissions": {
            "type": "array",
            "defaultValue": [
                "list",
                "get"
            ],
            "metadata": {
                "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
            }
        },
        "AKVskuName": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
            }
        },
        "location": {
            "defaultValue": "[resourceGroup().location]",
            "type": "string"
        },
        "tenantId": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
            }
        }
    },
    "functions": [
        {
            "namespace": "namebuilder",
            "members": {
                "uniqueName": {
                    "parameters": [
                        {
                            "name": "rootName",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[concat(parameters('rootName'),'-', uniqueString(resourceGroup().id))]"
                    }
                }
            }
        }
    ],
    "variables": {
        "dataFactoryName": "[namebuilder.uniqueName(parameters('factoryNameRoot'))]",
        "databricksName": "[namebuilder.uniqueName(parameters('databricksNameRoot'))]",
        "databricksManagedRGId": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/', parameters('databricksNameRoot'),'-', uniqueString(subscription().subscriptionId, resourceGroup().id))]",
        "keyVaultName": "[namebuilder.uniqueName(parameters('keyVaultNameRoot'))]",
        "serverName": "[tolower(namebuilder.uniqueName(parameters('serverNameRoot')))]",
        "serverResourceGroupName": "[resourceGroup().name]",
        "subscriptionId": "[subscription().subscriptionId]",
        "uniqueStorage": "[uniqueString(variables('subscriptionId'), variables('serverResourceGroupName'), parameters('location'))]",
        "dataStorageAccountName": "[tolower(concat(parameters('dataStorageNameRoot'),variables('uniqueStorage')))]",
        "dataStorageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('dataStorageAccountName'))]",
        "sqlStorageName": "[tolower(concat(parameters('storageNameRoot'),variables('uniqueStorage')))]",
        "uniqueRoleGuid": "[guid(resourceId('Microsoft.Storage/storageAccounts', variables('sqlStorageName')), variables('storageBlobContributor'), resourceId('Microsoft.Sql/servers', variables('serverName')))]",
        "StorageBlobContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
        "databaseName": "etldb",
        "databaseEdition": "Basic",
        "databaseServiceObjectiveName": "Basic",
        "dataFactoryMSI": "[concat(resourceId('Microsoft.DataFactory/factories', variables('dataFactoryName')), '/providers/Microsoft.ManagedIdentity/Identities/default')]"
    },
    "resources": [
        {
            "name": "[variables('databricksName')]",
            "type": "Microsoft.Databricks/workspaces",
            "apiVersion": "2018-04-01",
            "tags": {},
            "location": "[parameters('location')]",
            "properties": {
                "managedResourceGroupId": "[variables('databricksManagedRGId')]"
            },
            "sku": {
                "name": "standard"
            }
        },
        {
            "name": "[variables('dataFactoryName')]",
            "type": "Microsoft.DataFactory/factories",
            "apiVersion": "2018-06-01",
            "location": "[parameters('location')]",
            "tags": {},
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {},
            "resources": []
        },
        {
            "name": "[variables('keyVaultName')]",
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2018-02-14",
            "location": "[parameters('location')]",
            "properties": {
                "enabledForDeployment": true,
                "enabledForDiskEncryption": true,
                "enabledForTemplateDeployment": true,
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": [
                    {
                        "objectId": "[parameters('objectId')]",
                        "tenantId": "[parameters('tenantId')]",
                        "permissions": {
                            "keys": "[parameters('keysPermissions')]",
                            "secrets": "[parameters('secretsPermissions')]"
                        }
                    },
                    {
                        "objectId": "[reference(variables('dataFactoryMSI'), '2015-08-31-PREVIEW').principalId]",
                        "tenantId": "[parameters('tenantId')]",
                        "permissions": {
                            "keys": "[parameters('keysPermissions')]",
                            "secrets": "[parameters('secretsPermissions')]"
                        }
                    }
                ],
                "sku": {
                    "name": "[parameters('AKVskuName')]",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            },
            "dependsOn": [
                "[variables('dataFactoryName')]"
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/sqlconnstr')]",
            "apiVersion": "2018-02-14",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('keyVaultName')]",
                "[variables('serverName')]"
            ],
            "properties": {
                "value": "[concat('Server=tcp:',variables('serverName'),'.database.windows.net,1433;Initial Catalog=',variables('databaseName') ,';Persist Security Info=False;User ID=',parameters('administratorLogin'),';Password=',parameters('administratorLoginPassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/datastoragekey')]",
            "apiVersion": "2018-02-14",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('keyVaultName')]",
                "[variables('dataStorageAccountName')]"
            ],
            "properties": {
                "value": "[listKeys(variables('dataStorageAccountId'), '2019-04-01').keys[0].value]"
            }
        },
        {
            "name": "[variables('dataStorageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-07-01",
            "location": "[parameters('location')]",
            "kind": "StorageV2",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "accessTier": "Hot",
                "isHnsEnabled": true
            },
            "resources": [
                {
                    "name": "default/raw",
                    "type": "blobServices/containers",
                    "apiVersion": "2018-07-01",
                    "dependsOn": [
                        "[variables('dataStorageAccountName')]"
                    ]
                },
                {
                    "name": "default/processed",
                    "type": "blobServices/containers",
                    "apiVersion": "2018-07-01",
                    "dependsOn": [
                        "[variables('dataStorageAccountName')]"
                    ]
                },
                {
                    "name": "default/curated",
                    "type": "blobServices/containers",
                    "apiVersion": "2018-07-01",
                    "dependsOn": [
                        "[variables('dataStorageAccountName')]"
                    ]
                }
            ]
        },
        {
            "name": "[variables('serverName')]",
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2018-06-01-preview",
            "location": "[parameters('location')]",
            "identity": "[if(parameters('enableADS'), json('{\"type\":\"SystemAssigned\"}'), json('null'))]",
            "properties": {
                "administratorLogin": "[parameters('administratorLogin')]",
                "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
                "version": "12.0"
            },
            "resources": [
                {
                    "name": "[variables('databaseName')]",
                    "type": "databases",
                    "apiVersion": "2015-01-01",
                    "location": "[parameters('location')]",
                    "tags": {},
                    "properties": {
                        "edition": "[variables('databaseEdition')]",
                        "collation": "SQL_Latin1_General_CP1_CI_AS",
                        "requestedServiceObjectiveName": "[variables('databaseServiceObjectiveName')]"
                    },
                    "dependsOn": [
                        "[variables('serverName')]"
                    ],
                    "resources": [
                        {
                            "comments": "Transparent Data Encryption",
                            "name": "current",
                            "type": "transparentDataEncryption",
                            "apiVersion": "2014-04-01-preview",
                            "properties": {
                                "status": "Enabled"
                            },
                            "dependsOn": [
                                "[variables('databaseName')]"
                            ]
                        }
                    ]
                },
                {
                    "condition": "[parameters('allowAzureIPs')]",
                    "type": "firewallRules",
                    "apiVersion": "2018-06-01-preview",
                    "name": "AllowAllWindowsAzureIps",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
                    ],
                    "properties": {
                        "endIpAddress": "0.0.0.0",
                        "startIpAddress": "0.0.0.0"
                    }
                },
                {
                    "condition": "[parameters('enableADS')]",
                    "type": "securityAlertPolicies",
                    "apiVersion": "2017-03-01-preview",
                    "name": "Default",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
                    ],
                    "properties": {
                        "state": "Enabled",
                        "emailAccountAdmins": true
                    }
                },
                {
                    "condition": "[parameters('enableADS')]",
                    "type": "vulnerabilityAssessments",
                    "apiVersion": "2018-06-01-preview",
                    "name": "Default",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]",
                        "[resourceId('Microsoft.Sql/servers/securityAlertPolicies', variables('serverName'), 'Default')]",
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('sqlStorageName'))]"
                    ],
                    "properties": {
                        "storageContainerPath": "[if(parameters('enableADS'), concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('sqlStorageName'))).primaryEndpoints.blob, 'vulnerability-assessment'), json('null'))]",
                        "recurringScans": {
                            "isEnabled": true,
                            "emailSubscriptionAdmins": true
                        }
                    }
                },
                {
                    "type": "connectionPolicies",
                    "apiVersion": "2014-04-01",
                    "name": "Default",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]"
                    ],
                    "properties": {
                        "connectionType": "[parameters('connectionType')]"
                    }
                }
            ]
        },

{
          "condition": "[parameters('enableADS')]",
          "type": "Microsoft.Storage/storageAccounts",
          "apiVersion": "2019-04-01",
          "name": "[variables('sqlStorageName')]",
          "location": "[parameters('location')]",
          "sku": {
              "name": "Standard_LRS"
          },
          "kind": "StorageV2",
          "resources": [
              {
                    "condition": "[parameters('enableADS')]",
                    "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
                    "apiVersion": "2018-09-01-preview",
                    "name": "[concat(variables('sqlStorageName'), '/Microsoft.Authorization/', variables('uniqueRoleGuid') )]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', variables('serverName'))]",
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('sqlStorageName'))]"
                    ],
                    "properties": {
                        "roleDefinitionId": "[variables('StorageBlobContributor')]",
                        "principalId": "[reference(resourceId('Microsoft.Sql/servers', variables('serverName')), '2018-06-01-preview', 'Full').identity.principalId]",
                        "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('sqlStorageName'))]",
                        "principalType": "ServicePrincipal"
                    }
              }
          ]
      } 




    ],
    "outputs": {
        "msiforadf": {
            "type": "string",
            "value": "[variables('dataFactoryMSI')]"
        },
        "guidforsqldb": {
            "type": "string",
            "value": "[variables('uniqueRoleGuid')]"
        }
    }
}